/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface LotteryInterface extends ethers.utils.Interface {
  functions: {
    "approve(address,uint256)": FunctionFragment;
    "balanceOf(address)": FunctionFragment;
    "buyTickets()": FunctionFragment;
    "calculateFees(uint256,uint256,uint256,uint256)": FunctionFragment;
    "chainlinkFee()": FunctionFragment;
    "claimFees()": FunctionFragment;
    "claimReward()": FunctionFragment;
    "claimedFees()": FunctionFragment;
    "createLottery(uint256,uint256,uint256,uint256,uint256,uint256,uint256)": FunctionFragment;
    "currentLotteryID()": FunctionFragment;
    "extendCurrentLottery(uint256)": FunctionFragment;
    "feeReceiver()": FunctionFragment;
    "getApproved(uint256)": FunctionFragment;
    "isApprovedForAll(address,address)": FunctionFragment;
    "jackpot()": FunctionFragment;
    "lastClaimedTokenID()": FunctionFragment;
    "lottery(uint256)": FunctionFragment;
    "myobu()": FunctionFragment;
    "myobuNeededForTickets(address,uint256)": FunctionFragment;
    "name()": FunctionFragment;
    "owner()": FunctionFragment;
    "ownerOf(uint256)": FunctionFragment;
    "rawFulfillRandomness(bytes32,uint256)": FunctionFragment;
    "recoverLINK(uint256)": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "rewardClaimed()": FunctionFragment;
    "safeTransferFrom(address,address,uint256)": FunctionFragment;
    "setApprovalForAll(address,bool)": FunctionFragment;
    "setChainlinkFee(uint256)": FunctionFragment;
    "setFeeReceiver(address)": FunctionFragment;
    "setMyobu(address)": FunctionFragment;
    "supportsInterface(bytes4)": FunctionFragment;
    "symbol()": FunctionFragment;
    "ticketsBought(address,uint256)": FunctionFragment;
    "toNextLottery()": FunctionFragment;
    "tokenID()": FunctionFragment;
    "tokenURI(uint256)": FunctionFragment;
    "transferFrom(address,address,uint256)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "unclaimedFees()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "approve",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "balanceOf", values: [string]): string;
  encodeFunctionData(
    functionFragment: "buyTickets",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "calculateFees",
    values: [BigNumberish, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "chainlinkFee",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "claimFees", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "claimReward",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "claimedFees",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "createLottery",
    values: [
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "currentLotteryID",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "extendCurrentLottery",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "feeReceiver",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getApproved",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "isApprovedForAll",
    values: [string, string]
  ): string;
  encodeFunctionData(functionFragment: "jackpot", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "lastClaimedTokenID",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "lottery",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "myobu", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "myobuNeededForTickets",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "ownerOf",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "rawFulfillRandomness",
    values: [BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "recoverLINK",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "rewardClaimed",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "safeTransferFrom",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setApprovalForAll",
    values: [string, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setChainlinkFee",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setFeeReceiver",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "setMyobu", values: [string]): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "symbol", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "ticketsBought",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "toNextLottery",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "tokenID", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "tokenURI",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferFrom",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "unclaimedFees",
    values?: undefined
  ): string;

  decodeFunctionResult(functionFragment: "approve", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "buyTickets", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "calculateFees",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "chainlinkFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "claimFees", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "claimReward",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimedFees",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createLottery",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "currentLotteryID",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "extendCurrentLottery",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "feeReceiver",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getApproved",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isApprovedForAll",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "jackpot", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "lastClaimedTokenID",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "lottery", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "myobu", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "myobuNeededForTickets",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "ownerOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "rawFulfillRandomness",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "recoverLINK",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rewardClaimed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "safeTransferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setApprovalForAll",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setChainlinkFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setFeeReceiver",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setMyobu", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "symbol", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "ticketsBought",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "toNextLottery",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "tokenID", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "tokenURI", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "unclaimedFees",
    data: BytesLike
  ): Result;

  events: {
    "Approval(address,address,uint256)": EventFragment;
    "ApprovalForAll(address,address,bool)": EventFragment;
    "FeesClaimed(uint256,address)": EventFragment;
    "LotteryCreated(uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256)": EventFragment;
    "LotteryExtended(uint256)": EventFragment;
    "LotteryWon(address,uint256,uint256)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "TicketsBought(address,uint256,uint256)": EventFragment;
    "Transfer(address,address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Approval"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ApprovalForAll"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "FeesClaimed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LotteryCreated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LotteryExtended"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LotteryWon"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TicketsBought"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Transfer"): EventFragment;
}

export class Lottery extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: LotteryInterface;

  functions: {
    approve(
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    balanceOf(owner: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    buyTickets(
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    calculateFees(
      currentTokenID: BigNumberish,
      ticketPrice: BigNumberish,
      ticketFee: BigNumberish,
      lastClaimedTokenID_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    chainlinkFee(overrides?: CallOverrides): Promise<[BigNumber]>;

    claimFees(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    claimReward(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    claimedFees(overrides?: CallOverrides): Promise<[BigNumber]>;

    createLottery(
      lotteryLength: BigNumberish,
      ticketPrice: BigNumberish,
      ticketFee: BigNumberish,
      percentageToKeepForNextLottery: BigNumberish,
      minimumMyobuBalance: BigNumberish,
      myobuNeededForEachTicket: BigNumberish,
      percentageToKeepOnNotEnoughMyobu: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    currentLotteryID(overrides?: CallOverrides): Promise<[BigNumber]>;

    extendCurrentLottery(
      extraTime: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    feeReceiver(overrides?: CallOverrides): Promise<[string]>;

    getApproved(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    isApprovedForAll(
      owner: string,
      operator: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    jackpot(overrides?: CallOverrides): Promise<[BigNumber]>;

    lastClaimedTokenID(overrides?: CallOverrides): Promise<[BigNumber]>;

    lottery(
      lotteryID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        [
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber
        ] & {
          startingTokenID: BigNumber;
          startTimestamp: BigNumber;
          endTimestamp: BigNumber;
          ticketPrice: BigNumber;
          ticketFee: BigNumber;
          minimumMyobuBalance: BigNumber;
          percentageToKeepForNextLottery: BigNumber;
          myobuNeededForEachTicket: BigNumber;
          percentageToKeepOnNotEnoughMyobu: BigNumber;
        }
      ]
    >;

    myobu(overrides?: CallOverrides): Promise<[string]>;

    myobuNeededForTickets(
      user: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    name(overrides?: CallOverrides): Promise<[string]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    ownerOf(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    rawFulfillRandomness(
      requestId: BytesLike,
      randomness: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    recoverLINK(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    rewardClaimed(overrides?: CallOverrides): Promise<[boolean]>;

    "safeTransferFrom(address,address,uint256)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "safeTransferFrom(address,address,uint256,bytes)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      _data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setApprovalForAll(
      operator: string,
      approved: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setChainlinkFee(
      newChainlinkFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setFeeReceiver(
      newFeeReceiver: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setMyobu(
      newMyobu: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    symbol(overrides?: CallOverrides): Promise<[string]>;

    ticketsBought(
      user: string,
      lotteryID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    toNextLottery(overrides?: CallOverrides): Promise<[BigNumber]>;

    tokenID(overrides?: CallOverrides): Promise<[BigNumber]>;

    tokenURI(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    transferFrom(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    unclaimedFees(overrides?: CallOverrides): Promise<[BigNumber]>;
  };

  approve(
    to: string,
    tokenId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  balanceOf(owner: string, overrides?: CallOverrides): Promise<BigNumber>;

  buyTickets(
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  calculateFees(
    currentTokenID: BigNumberish,
    ticketPrice: BigNumberish,
    ticketFee: BigNumberish,
    lastClaimedTokenID_: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  chainlinkFee(overrides?: CallOverrides): Promise<BigNumber>;

  claimFees(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  claimReward(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  claimedFees(overrides?: CallOverrides): Promise<BigNumber>;

  createLottery(
    lotteryLength: BigNumberish,
    ticketPrice: BigNumberish,
    ticketFee: BigNumberish,
    percentageToKeepForNextLottery: BigNumberish,
    minimumMyobuBalance: BigNumberish,
    myobuNeededForEachTicket: BigNumberish,
    percentageToKeepOnNotEnoughMyobu: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  currentLotteryID(overrides?: CallOverrides): Promise<BigNumber>;

  extendCurrentLottery(
    extraTime: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  feeReceiver(overrides?: CallOverrides): Promise<string>;

  getApproved(
    tokenId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  isApprovedForAll(
    owner: string,
    operator: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  jackpot(overrides?: CallOverrides): Promise<BigNumber>;

  lastClaimedTokenID(overrides?: CallOverrides): Promise<BigNumber>;

  lottery(
    lotteryID: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber
    ] & {
      startingTokenID: BigNumber;
      startTimestamp: BigNumber;
      endTimestamp: BigNumber;
      ticketPrice: BigNumber;
      ticketFee: BigNumber;
      minimumMyobuBalance: BigNumber;
      percentageToKeepForNextLottery: BigNumber;
      myobuNeededForEachTicket: BigNumber;
      percentageToKeepOnNotEnoughMyobu: BigNumber;
    }
  >;

  myobu(overrides?: CallOverrides): Promise<string>;

  myobuNeededForTickets(
    user: string,
    amount: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  name(overrides?: CallOverrides): Promise<string>;

  owner(overrides?: CallOverrides): Promise<string>;

  ownerOf(tokenId: BigNumberish, overrides?: CallOverrides): Promise<string>;

  rawFulfillRandomness(
    requestId: BytesLike,
    randomness: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  recoverLINK(
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  rewardClaimed(overrides?: CallOverrides): Promise<boolean>;

  "safeTransferFrom(address,address,uint256)"(
    from: string,
    to: string,
    tokenId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "safeTransferFrom(address,address,uint256,bytes)"(
    from: string,
    to: string,
    tokenId: BigNumberish,
    _data: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setApprovalForAll(
    operator: string,
    approved: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setChainlinkFee(
    newChainlinkFee: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setFeeReceiver(
    newFeeReceiver: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setMyobu(
    newMyobu: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  supportsInterface(
    interfaceId: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  symbol(overrides?: CallOverrides): Promise<string>;

  ticketsBought(
    user: string,
    lotteryID: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  toNextLottery(overrides?: CallOverrides): Promise<BigNumber>;

  tokenID(overrides?: CallOverrides): Promise<BigNumber>;

  tokenURI(tokenId: BigNumberish, overrides?: CallOverrides): Promise<string>;

  transferFrom(
    from: string,
    to: string,
    tokenId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  unclaimedFees(overrides?: CallOverrides): Promise<BigNumber>;

  callStatic: {
    approve(
      to: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    balanceOf(owner: string, overrides?: CallOverrides): Promise<BigNumber>;

    buyTickets(overrides?: CallOverrides): Promise<void>;

    calculateFees(
      currentTokenID: BigNumberish,
      ticketPrice: BigNumberish,
      ticketFee: BigNumberish,
      lastClaimedTokenID_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    chainlinkFee(overrides?: CallOverrides): Promise<BigNumber>;

    claimFees(overrides?: CallOverrides): Promise<void>;

    claimReward(overrides?: CallOverrides): Promise<string>;

    claimedFees(overrides?: CallOverrides): Promise<BigNumber>;

    createLottery(
      lotteryLength: BigNumberish,
      ticketPrice: BigNumberish,
      ticketFee: BigNumberish,
      percentageToKeepForNextLottery: BigNumberish,
      minimumMyobuBalance: BigNumberish,
      myobuNeededForEachTicket: BigNumberish,
      percentageToKeepOnNotEnoughMyobu: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    currentLotteryID(overrides?: CallOverrides): Promise<BigNumber>;

    extendCurrentLottery(
      extraTime: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    feeReceiver(overrides?: CallOverrides): Promise<string>;

    getApproved(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    isApprovedForAll(
      owner: string,
      operator: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    jackpot(overrides?: CallOverrides): Promise<BigNumber>;

    lastClaimedTokenID(overrides?: CallOverrides): Promise<BigNumber>;

    lottery(
      lotteryID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        startingTokenID: BigNumber;
        startTimestamp: BigNumber;
        endTimestamp: BigNumber;
        ticketPrice: BigNumber;
        ticketFee: BigNumber;
        minimumMyobuBalance: BigNumber;
        percentageToKeepForNextLottery: BigNumber;
        myobuNeededForEachTicket: BigNumber;
        percentageToKeepOnNotEnoughMyobu: BigNumber;
      }
    >;

    myobu(overrides?: CallOverrides): Promise<string>;

    myobuNeededForTickets(
      user: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<string>;

    owner(overrides?: CallOverrides): Promise<string>;

    ownerOf(tokenId: BigNumberish, overrides?: CallOverrides): Promise<string>;

    rawFulfillRandomness(
      requestId: BytesLike,
      randomness: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    recoverLINK(amount: BigNumberish, overrides?: CallOverrides): Promise<void>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    rewardClaimed(overrides?: CallOverrides): Promise<boolean>;

    "safeTransferFrom(address,address,uint256)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "safeTransferFrom(address,address,uint256,bytes)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      _data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    setApprovalForAll(
      operator: string,
      approved: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    setChainlinkFee(
      newChainlinkFee: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setFeeReceiver(
      newFeeReceiver: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setMyobu(newMyobu: string, overrides?: CallOverrides): Promise<void>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    symbol(overrides?: CallOverrides): Promise<string>;

    ticketsBought(
      user: string,
      lotteryID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    toNextLottery(overrides?: CallOverrides): Promise<BigNumber>;

    tokenID(overrides?: CallOverrides): Promise<BigNumber>;

    tokenURI(tokenId: BigNumberish, overrides?: CallOverrides): Promise<string>;

    transferFrom(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    unclaimedFees(overrides?: CallOverrides): Promise<BigNumber>;
  };

  filters: {
    Approval(
      owner?: string | null,
      approved?: string | null,
      tokenId?: BigNumberish | null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { owner: string; approved: string; tokenId: BigNumber }
    >;

    ApprovalForAll(
      owner?: string | null,
      operator?: string | null,
      approved?: null
    ): TypedEventFilter<
      [string, string, boolean],
      { owner: string; operator: string; approved: boolean }
    >;

    FeesClaimed(
      amountClaimed?: null,
      claimer?: null
    ): TypedEventFilter<
      [BigNumber, string],
      { amountClaimed: BigNumber; claimer: string }
    >;

    LotteryCreated(
      lotteryID?: null,
      lotteryLength?: null,
      ticketPrice?: null,
      ticketFee?: null,
      minimumMyobuBalance?: null,
      percentageToKeepForNextLottery?: null,
      myobuNeededForEachTicket?: null,
      percentageToKeepOnNotEnoughMyobu?: null
    ): TypedEventFilter<
      [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ],
      {
        lotteryID: BigNumber;
        lotteryLength: BigNumber;
        ticketPrice: BigNumber;
        ticketFee: BigNumber;
        minimumMyobuBalance: BigNumber;
        percentageToKeepForNextLottery: BigNumber;
        myobuNeededForEachTicket: BigNumber;
        percentageToKeepOnNotEnoughMyobu: BigNumber;
      }
    >;

    LotteryExtended(
      extendedBy?: null
    ): TypedEventFilter<[BigNumber], { extendedBy: BigNumber }>;

    LotteryWon(
      winner?: null,
      amountWon?: null,
      tokenID?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber],
      { winner: string; amountWon: BigNumber; tokenID: BigNumber }
    >;

    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;

    TicketsBought(
      buyer?: null,
      amount?: null,
      price?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber],
      { buyer: string; amount: BigNumber; price: BigNumber }
    >;

    Transfer(
      from?: string | null,
      to?: string | null,
      tokenId?: BigNumberish | null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { from: string; to: string; tokenId: BigNumber }
    >;
  };

  estimateGas: {
    approve(
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    balanceOf(owner: string, overrides?: CallOverrides): Promise<BigNumber>;

    buyTickets(
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    calculateFees(
      currentTokenID: BigNumberish,
      ticketPrice: BigNumberish,
      ticketFee: BigNumberish,
      lastClaimedTokenID_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    chainlinkFee(overrides?: CallOverrides): Promise<BigNumber>;

    claimFees(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    claimReward(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    claimedFees(overrides?: CallOverrides): Promise<BigNumber>;

    createLottery(
      lotteryLength: BigNumberish,
      ticketPrice: BigNumberish,
      ticketFee: BigNumberish,
      percentageToKeepForNextLottery: BigNumberish,
      minimumMyobuBalance: BigNumberish,
      myobuNeededForEachTicket: BigNumberish,
      percentageToKeepOnNotEnoughMyobu: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    currentLotteryID(overrides?: CallOverrides): Promise<BigNumber>;

    extendCurrentLottery(
      extraTime: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    feeReceiver(overrides?: CallOverrides): Promise<BigNumber>;

    getApproved(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isApprovedForAll(
      owner: string,
      operator: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    jackpot(overrides?: CallOverrides): Promise<BigNumber>;

    lastClaimedTokenID(overrides?: CallOverrides): Promise<BigNumber>;

    lottery(
      lotteryID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    myobu(overrides?: CallOverrides): Promise<BigNumber>;

    myobuNeededForTickets(
      user: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    ownerOf(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    rawFulfillRandomness(
      requestId: BytesLike,
      randomness: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    recoverLINK(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    rewardClaimed(overrides?: CallOverrides): Promise<BigNumber>;

    "safeTransferFrom(address,address,uint256)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "safeTransferFrom(address,address,uint256,bytes)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      _data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setApprovalForAll(
      operator: string,
      approved: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setChainlinkFee(
      newChainlinkFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setFeeReceiver(
      newFeeReceiver: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setMyobu(
      newMyobu: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    symbol(overrides?: CallOverrides): Promise<BigNumber>;

    ticketsBought(
      user: string,
      lotteryID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    toNextLottery(overrides?: CallOverrides): Promise<BigNumber>;

    tokenID(overrides?: CallOverrides): Promise<BigNumber>;

    tokenURI(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    transferFrom(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    unclaimedFees(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    approve(
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    balanceOf(
      owner: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    buyTickets(
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    calculateFees(
      currentTokenID: BigNumberish,
      ticketPrice: BigNumberish,
      ticketFee: BigNumberish,
      lastClaimedTokenID_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    chainlinkFee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    claimFees(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    claimReward(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    claimedFees(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    createLottery(
      lotteryLength: BigNumberish,
      ticketPrice: BigNumberish,
      ticketFee: BigNumberish,
      percentageToKeepForNextLottery: BigNumberish,
      minimumMyobuBalance: BigNumberish,
      myobuNeededForEachTicket: BigNumberish,
      percentageToKeepOnNotEnoughMyobu: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    currentLotteryID(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    extendCurrentLottery(
      extraTime: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    feeReceiver(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getApproved(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isApprovedForAll(
      owner: string,
      operator: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    jackpot(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    lastClaimedTokenID(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    lottery(
      lotteryID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    myobu(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    myobuNeededForTickets(
      user: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    name(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    ownerOf(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    rawFulfillRandomness(
      requestId: BytesLike,
      randomness: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    recoverLINK(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    rewardClaimed(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "safeTransferFrom(address,address,uint256)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "safeTransferFrom(address,address,uint256,bytes)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      _data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setApprovalForAll(
      operator: string,
      approved: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setChainlinkFee(
      newChainlinkFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setFeeReceiver(
      newFeeReceiver: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setMyobu(
      newMyobu: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    symbol(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    ticketsBought(
      user: string,
      lotteryID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    toNextLottery(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    tokenID(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    tokenURI(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    transferFrom(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    unclaimedFees(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
